name: CI

on:
  pull_request:
    paths-ignore:
      - '**/*.md'
  push:
    paths-ignore:
      - '**/*.md'

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  CI: true
  TERM: dumb
  GRADLE_OPTS: >
    -Dorg.gradle.jvmargs="-Xmx2G -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError -XX:+UseG1GC"
    -Dorg.gradle.parallel=true
    -Dorg.gradle.workers.max=2
    -Dorg.gradle.vfs.watch=false
    -Dorg.gradle.dependency.verification.console=verbose
    -Dkotlin.compiler.execution.strategy=in-process
    -DwarningsAsErrors=false

jobs:
  assemble:
    name: Assemble debug, run tests
    runs-on: self-hosted
    timeout-minutes: 60
    if: ${{ !contains(github.event.head_commit.message, '[ci skip]') }}

    steps:
      - name: Clean the repository
        run: |
          /usr/bin/git clean -ffd || true
          /usr/bin/git reset --hard HEAD || true

      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          clean: false
          fetch-depth: 0

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '19'

      - name: Unpack google-services.json
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: echo "$GOOGLE_SERVICES_JSON" | base64 -d | zstd -d  -o app/src/google-services.json

      - name: Assemble debug build, run tests
        uses: gradle/gradle-build-action@v2
        with:
          arguments: assembleDebug test --stacktrace

      - name: Cleanup secrets
        if: ${{ always() }}
        run: rm -f app/src/google-services.json

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: build-outputs
          path: app/build/outputs

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: ${{ always() }}
        with:
          junit_files: '**/build/test-results/**/*.xml'
          check_name: "Unit test results"

      - name: Bundle the build report
        if: ${{ failure() }}
        run: >
          find . -type d \( -name 'reports' -o -name 'compose-*' \) -print0
          | xargs -0 tar -c -I 'zstd -19 -T0' -f build-reports.tar.zst

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: test-reports
          path: build-reports.tar.zst

  static-analysis:
    name: Style check
    runs-on: self-hosted
    timeout-minutes: 60
    if: ${{ !contains(github.event.head_commit.message, '[ci skip]') }}

    steps:
      - name: Clean the repository
        run: |
          /usr/bin/git clean -ffd || true
          /usr/bin/git reset --hard HEAD || true

      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          clean: false
          fetch-depth: 0

      - name: Install dprint
        shell: bash
        run: |
          [ ! -e ~/.dprint/bin/dprint ] &&  curl -fsSL https://dprint.dev/install.sh | sh > /dev/null 2>&1
          echo "$HOME/.dprint/bin" >> $GITHUB_PATH

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '19'

      - name: Run dprint
        run: dprint check

      - name: Unpack google-services.json
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: echo "$GOOGLE_SERVICES_JSON" | base64 -d | zstd -d  -o app/src/google-services.json

      - name: Run static code analyzers
        uses: gradle/gradle-build-action@v2
        with:
          arguments: styleCheck --continue

      - name: Cleanup secrets
        if: ${{ always() }}
        run: rm -f app/src/google-services.json

      - name: Bundle the build report and lint outputs
        if: ${{ always() }}
        run: >
          tar -c -I 'zstd -19 -T0' -f build-reports.tar.zst app/build/reports build/reports

      - name: Upload lint outputs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: lint-outputs
          path: build-reports.tar.zst
