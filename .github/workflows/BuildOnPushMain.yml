name: CI on push to main

on:
  pull_request:
    paths-ignore:
      - '**/*.md'
    branches:
      - main
  push:
    paths-ignore:
      - '**/*.md'
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  CI: true
  TERM: dumb
  GRADLE_OPTS: >-
    -Dorg.gradle.jvmargs="-Xmx1536M -XX:MaxMetaspaceSize=1g -XX:SoftRefLRUPolicyMSPerMB=10 -XX:+UseParallelGC"
    -Dorg.gradle.parallel=true
    -Dorg.gradle.workers.max=2
    -Dorg.gradle.vfs.watch=false
    -Dorg.gradle.dependency.verification.console=verbose
    -DwarningsAsErrors=false
  KOTLIN_DAEMON_JVMARGS: >-
    -Xmx1536M -XX:MaxMetaspaceSize=320M -XX:SoftRefLRUPolicyMSPerMB=10 -XX:+UseParallelGC -XX:NewRatio=1

jobs:
  assemble:
    name: Assemble release
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: ${{ !contains(github.event.head_commit.message, '[ci skip]') }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          clean: true
          fetch-depth: 0

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '19'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Unpack sign keys and secrets
        env:
          SIGN_KEYS_AND_SECRETS: ${{ secrets.SIGN_KEYS_AND_SECRETS }}
        run: echo "$SIGN_KEYS_AND_SECRETS" | base64 -d | zstd -d | tar -xf -

      - name: Assemble release build, run static-analysis, build release
        run: >
          ./gradlew -Pkotlin.daemon.jvmargs="${{ env.KOTLIN_DAEMON_JVMARGS }}"
          lintRelease assembleRelease --stacktrace

      - name: Cleanup secrets
        if: ${{ always() }}
        run: |
          rm -f config/signing/release.jks
          rm -f config/signing/release.properties
          rm -f app/src/google-services.json

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-outputs
          path: app/build/outputs

      - name: Bundle the build report and lint outputs
        if: ${{ always() }}
        run: >
          find . -type d \( -name 'reports' -o -name 'compose-*' \) -print0
          | xargs -0 tar -c -I 'zstd -19 -T0' -f build-reports.tar.zst

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: test-reports
          path: build-reports.tar.zst

      - name: Uploads lint .sarif files to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: .
          category: android-lint

  instrumented-tests:
    name: Instrumented tests
    runs-on: macos-latest
    timeout-minutes: 60
    if: ${{ !contains(github.event.head_commit.message, '[ci skip]') }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          clean: true
          fetch-depth: 0

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '19'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

      - name: Cache PIP Packages for EnricoMi/publish-unit-test-result-action/composite
        uses: actions/cache@v3
        id: cache
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', 'composite/action.yml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Accept licenses
        run: |
          yes | ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --licenses

      - name: Unpack google-services.json
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: echo "$GOOGLE_SERVICES_JSON" | base64 -d | zstd -d  -o app/src/google-services.json

      - name: Clean unused managed devices
        run: >
          ./gradlew
          -Pkotlin.daemon.jvmargs="${{ env.KOTLIN_DAEMON_JVMARGS }}"
          -Pandroid.testoptions.manageddevices.emulator.gpu=swiftshader_indirect
          -Pandroid.experimental.testOptions.managedDevices.emulator.showKernelLogging=true
          cleanManagedDevices --unused-only
          --continue

      - name: Run instrumented tests
        run: >
          ./gradlew
          -Pkotlin.daemon.jvmargs="${{ env.KOTLIN_DAEMON_JVMARGS }}"
          -Dorg.gradle.workers.max=1
          -Pandroid.testoptions.manageddevices.emulator.gpu=swiftshader_indirect
          -Pandroid.experimental.testOptions.managedDevices.emulator.showKernelLogging=true
          pixel2api30DebugAndroidTest
          --continue --info

      - name: Cleanup secrets
        if: ${{ always() }}
        run: rm -f app/src/google-services.json

      - name: Publish instrumented test results
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        if: ${{ always() }}
        with:
          junit_files: '**/build/outputs/androidTest-results/**/*.xml'
          check_name: "Instrumented test results"

      - name: Bundle the instrumented tests report
        if: ${{ failure() }}
        run: >-
          find . -type d \( -path '*/build/compose-*'
          -o -path '*/build/outputs/androidTest-results'
          -o -path '*/build/outputs/managed_*'
          -o -path '*/build/reports/androidTests' \) -print0
          |  xargs -0 tar -c -I 'zstd -19 -T0' -f instrumented-tests.tar.zst

      - name: Upload test reports
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: instrumented-test-reports
          path: instrumented-tests.tar.zst
