name: CI on push to main

on:
  pull_request:
    paths-ignore:
      - '**/*.md'
    branches:
      - main
  push:
    paths-ignore:
      - '**/*.md'
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  CI: true
  TERM: dumb
  GRADLE_OPTS: >
    -Dorg.gradle.jvmargs="-Xmx2G -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError -XX:+UseG1GC"
    -Dorg.gradle.parallel=true
    -Dorg.gradle.workers.max=2
    -Dorg.gradle.vfs.watch=false
    -Dorg.gradle.dependency.verification.console=verbose
    -Dkotlin.compiler.execution.strategy=in-process
    -DwarningsAsErrors=false

jobs:
  assemble:
    name: Assemble release
    runs-on: self-hosted
    timeout-minutes: 60
    if: ${{ !contains(github.event.head_commit.message, '[ci skip]') }}

    steps:
      - name: Clean the repository
        run: |
          /usr/bin/git clean -ffd || true
          /usr/bin/git reset --hard HEAD || true

      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          clean: false
          fetch-depth: 0

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '19'

      - name: Unpack sign keys and secrets
        env:
          SIGN_KEYS_AND_SECRETS: ${{ secrets.SIGN_KEYS_AND_SECRETS }}
        run: echo "$SIGN_KEYS_AND_SECRETS" | base64 -d | zstd -d | tar -xf -

      - name: Assemble release build, run static-analysis, build release
        uses: gradle/gradle-build-action@v2
        with:
          arguments: lintRelease assembleRelease --stacktrace

      - name: Cleanup secrets
        if: ${{ always() }}
        run: |
          rm -f config/signing/release.jks
          rm -f config/signing/release.properties
          rm -f app/src/google-services.json

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-outputs
          path: app/build/outputs

      - name: Bundle the build report and lint outputs
        if: ${{ always() }}
        run: >
          find . -type d \( -name 'reports' -o -name 'compose-*' \) -print0
          | xargs -0 tar -c -I 'zstd -19 -T0' -f build-reports.tar.zst

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: test-reports
          path: build-reports.tar.zst

  instrumented-tests:
    name: Instrumented tests
    runs-on: self-hosted
    timeout-minutes: 60
    if: ${{ !contains(github.event.head_commit.message, '[ci skip]') }}

    steps:
      - name: Clean the repository
        run: |
          /usr/bin/git clean -ffd || true
          /usr/bin/git reset --hard HEAD || true

      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          clean: false
          fetch-depth: 0

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '19'

      - name: Unpack google-services.json
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: echo "$GOOGLE_SERVICES_JSON" | base64 -d | zstd -d  -o app/src/google-services.json

      - name: Clean unused managed devices
        uses: gradle/gradle-build-action@v2
        with:
          arguments: |
            -Pandroid.testoptions.manageddevices.emulator.gpu=swiftshader_indirect
            -Pandroid.experimental.testOptions.managedDevices.emulator.showKernelLogging=true
            cleanManagedDevices --unused-only
            --continue

      - name: Run instrumented tests
        uses: gradle/gradle-build-action@v2
        with:
          arguments: |
            -Dorg.gradle.workers.max=1
            -Pandroid.testoptions.manageddevices.emulator.gpu=swiftshader_indirect
            -Pandroid.experimental.testOptions.managedDevices.emulator.showKernelLogging=true
            phoneGroupDebugAndroidTest
            --continue

      - name: Cleanup secrets
        if: ${{ always() }}
        run: rm -f app/src/google-services.json

      - name: Publish instrumented test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: ${{ always() }}
        with:
          junit_files: '**/build/outputs/androidTest-results/**/*.xml'
          check_name: "Instrumented test results"

      - name: Bundle the instrumented tests report
        if: ${{ failure() }}
        run: >-
          find . -type d \( -path '*/build/compose-*'
          -o -path '*/build/outputs/androidTest-results'
          -o -path '*/build/outputs/managed_*'
          -o -path '*/build/reports/androidTests' \) -print0
          |  xargs -0 tar -c -I 'zstd -19 -T0' -f instrumented-tests.tar.zst

      - name: Upload test reports
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: instrumented-test-reports
          path: instrumented-tests.tar.zst
